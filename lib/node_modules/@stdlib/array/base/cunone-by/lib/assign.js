'use strict';

// MODULES //

var isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );
var accessorGetter = require( '@stdlib/array/base/accessor-getter' );

// MAIN //

/**
 * Cumulatively tests whether no array elements pass a test implemented by a predicate function and assigns results to an output array.
 *
 * @param {Array|TypedArray} x - input array
 * @param {Array|TypedArray} out - output array
 * @param {integer} stride - output array stride
 * @param {NonNegativeInteger} offset - output array index offset
 * @param {Function} predicate - predicate function
 * @returns {Array|TypedArray} output array
 *
 * @example
 * function isPositive( value ) {
 *     return ( value > 0 );
 * }
 *
 * var x = [ 0, 0, 0, 1, 0 ];
 * var out = [ false, null, false, null, false, null, false, null, false, null ];
 *
 * var y = assign( x, out, 2, 0, isPositive );
 * // returns [ true, null, true, null, true, null, false, null, false, null ]
 */
function assign( x, out, stride, offset, predicate ) {
    var getter;
    var prevResult;
    var ix;
    var i;

    if ( isAccessorArray( x ) ) {
        getter = accessorGetter( x );
    }

    ix = offset;
    prevResult = true;

    for ( i = 0; i < x.length; i++ ) {
        if ( i === 0 ) {
            prevResult = !predicate( getter ? getter( x, i ) : x[ i ] );
        } else {
            prevResult = prevResult && !predicate( getter ? getter( x, i ) : x[ i ] );
        }
        out[ ix ] = prevResult;
        ix += stride;
    }
    return out;
}

// EXPORTS //

module.exports = assign;