/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import cunoneBy = require( './index' );

// TESTS //

// The function returns an array...
{
    cunoneBy( [ 1, 2, 3, 4, 5 ], (x: number) => x > 10 ); // $ExpectType boolean[]
    cunoneBy( [ 'a', 'b', 'c' ], (x: string) => x === 'd' ); // $ExpectType boolean[]
}

// The compiler throws an error if the function is provided a first argument which is not an array-like object...
{
    cunoneBy( 1, (x: any) => x > 0 ); // $ExpectError
    cunoneBy( true, (x: any) => x === true ); // $ExpectError
    cunoneBy( false, (x: any) => x === false ); // $ExpectError
    cunoneBy( null, (x: any) => x === null ); // $ExpectError
    cunoneBy( undefined, (x: any) => x === undefined ); // $ExpectError
    cunoneBy( {}, (x: any) => typeof x === 'object' ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a function...
{
    cunoneBy( [1, 2, 3], 'not a function' ); // $ExpectError
    cunoneBy( [1, 2, 3], 123 ); // $ExpectError
    cunoneBy( [1, 2, 3], true ); // $ExpectError
    cunoneBy( [1, 2, 3], false ); // $ExpectError
    cunoneBy( [1, 2, 3], null ); // $ExpectError
    cunoneBy( [1, 2, 3], undefined ); // $ExpectError
    cunoneBy( [1, 2, 3], {} ); // $ExpectError
    cunoneBy( [1, 2, 3], [] ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
    cunoneBy(); // $ExpectError
    cunoneBy( [1, 2, 3] ); // $ExpectError
    cunoneBy( [1, 2, 3], (x: number) => x > 0, {} ); // $ExpectError
}

// Attached to the main export is an `assign` method which returns a collection...
{
    const x = [ 1, 2, 3, 4, 5 ];
    const y = [ false, null, false, null, false, null, false, null, false, null ];

    cunoneBy.assign( x, y, (v: number) => v > 10, 2, 0 ); // $ExpectType (boolean | null)[]
}

// The compiler throws an error if the `assign` method is provided a first argument which is not an array-like object...
{
    const y = [ false, null, false, null, false ];

    cunoneBy.assign( 1, y, (x: any) => x > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( true, y, (x: any) => x === true, 2, 0 ); // $ExpectError
    cunoneBy.assign( false, y, (x: any) => x === false, 2, 0 ); // $ExpectError
    cunoneBy.assign( null, y, (x: any) => x === null, 2, 0 ); // $ExpectError
    cunoneBy.assign( undefined, y, (x: any) => x === undefined, 2, 0 ); // $ExpectError
    cunoneBy.assign( {}, y, (x: any) => typeof x === 'object', 2, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a second argument which is not an array-like object...
{
    const x = [ 1, 2, 3, 4, 5 ];

    cunoneBy.assign( x, 1, (v: number) => v > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, true, (v: number) => v > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, false, (v: number) => v > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, null, (v: number) => v > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, undefined, (v: number) => v > 0, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, {}, (v: number) => v > 0, 2, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a third argument which is not a function...
{
    const x = [ 1, 2, 3, 4, 5 ];
    const y = [ false, null, false, null, false ];

    cunoneBy.assign( x, y, 'not a function', 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, 123, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, true, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, false, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, null, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, undefined, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, {}, 2, 0 ); // $ExpectError
    cunoneBy.assign( x, y, [], 2, 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a fourth argument which is not a number...
{
    const x = [ 1, 2, 3, 4, 5 ];
    const y = [ false, null, false, null, false ];

    cunoneBy.assign( x, y, (v: number) => v > 0, '1', 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, true, 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, false, 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, null, 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, undefined, 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, {}, 0 ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, [], 0 ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided a fifth argument which is not a number...
{
    const x = [ 1, 2, 3, 4, 5 ];
    const y = [ false, null, false, null, false ];

    cunoneBy.assign( x, y, (v: number) => v > 0, 1, '1' ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, true ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, false ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, null ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, undefined ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, {} ); // $ExpectError
    cunoneBy.assign( x, y, (v: number) => v > 0, 1, [] ); // $ExpectError
}

// The compiler throws an error if the `assign` method is provided an unsupported number of arguments...
{
    cunoneBy.assign(); // $ExpectError
    cunoneBy.assign( [] ); // $ExpectError
    cunoneBy.assign( [], [] ); // $ExpectError
    cunoneBy.assign( [], [], (x: any) => x > 0 ); // $ExpectError
    cunoneBy.assign( [], [], (x: any) => x > 0, 1 ); // $ExpectError
    cunoneBy.assign( [], [], (x: any) => x > 0, 1, 0, 10 ); // $ExpectError
}