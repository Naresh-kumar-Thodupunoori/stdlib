/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Collection, AccessorArrayLike } from '@stdlib/types/array';

/**
* Predicate function.
*
* @param value - array element
* @returns boolean indicating whether the element satisfies the predicate
*/
type Predicate<T> = (value: T) => boolean;

/**
* Interface describing `cunoneBy`.
*/
interface CunoneBy {
    /**
    * Cumulatively tests whether every element in a provided array fails a test implemented by a predicate function.
    *
    * @param x - input array
    * @param predicate - predicate function
    * @returns output array
    *
    * @example
    * var x = [ 1, 2, 3, 4, 5 ];
    *
    * var y = cunoneBy( x, function isEven( v ) { return v % 2 === 0; } );
    * // returns [ true, false, false, false, false ]
    */
    <T>(x: Collection<T> | AccessorArrayLike<T>, predicate: Predicate<T>): Array<boolean>;

    /**
    * Cumulatively tests whether every element in an array fails a test implemented by a predicate function and assigns the results to a provided output array.
    *
    * @param x - input array
    * @param y - output array
    * @param predicate - predicate function
    * @param stride - output array stride
    * @param offset - output array offset
    * @returns output array
    *
    * @example
    * var x = [ 1, 2, 3, 4, 5 ];
    * var y = [ false, null, false, null, false, null, false, null, false, null ];
    *
    * var arr = cunoneBy.assign( x, y, function isEven( v ) { return v % 2 === 0; }, 2, 0 );
    * // returns [ true, null, false, null, false, null, false, null, false, null ]
    */
    assign<T, U extends Collection<boolean> | AccessorArrayLike<boolean>>(
        x: Collection<T> | AccessorArrayLike<T>,
        y: U,
        predicate: Predicate<T>,
        stride: number,
        offset: number
    ): U;
}

/**
* Cumulatively tests whether every element in a provided array fails a test implemented by a predicate function.
*
* @param x - input array
* @param predicate - predicate function
* @returns output array
*
* @example
* var x = [ 1, 2, 3, 4, 5 ];
*
* var result = cunoneBy( x, function isEven( v ) { return v % 2 === 0; } );
* // returns [ true, false, false, false, false ]
*
* @example
* var x = [ 1, 2, 3, 4, 5 ];
* var y = [ false, null, false, null, false, null, false, null, false, null ];
*
* var arr = cunoneBy.assign( x, y, function isEven( v ) { return v % 2 === 0; }, 2, 0 );
* // returns [ true, null, false, null, false, null, false, null, false, null ]
*/
declare var cunoneBy: CunoneBy;

export = cunoneBy;