'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var Float64Array = require( '@stdlib/array/float64' );
var cunoneBy = require( './../lib' );

// TESTS //

tape( 'main export is a function', function test( t ) {
    t.ok( true, __filename );
    t.strictEqual( typeof cunoneBy, 'function', 'main export is a function' );
    t.end();
});

tape( 'the function cumulatively tests whether no array elements pass a test', function test( t ) {
    var expected;
    var actual;
    var x;

    x = [ 0, 0, 0, 1, 0 ];
    
    expected = [ true, true, true, false, false ];
    actual = cunoneBy( x, isPositive );

    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

tape( 'the function supports typed arrays', function test( t ) {
    var expected;
    var actual;
    var x;

    x = new Float64Array([ 0.0, 0.0, 0.0, 1.0, 0.0 ]);
    
    expected = [ true, true, true, false, false ];
    actual = cunoneBy( x, isPositive );

    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

tape( 'the function supports accessor arrays', function test( t ) {
    var expected;
    var actual;
    var x;

    x = {
        'length': 5,
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 1,
        '4': 0,
        'get': getter
    };
    
    expected = [ true, true, true, false, false ];
    actual = cunoneBy( x, isPositive );

    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }

    function getter( idx ) {
        return this[ idx ];
    }
});

tape( 'the function handles empty arrays', function test( t ) {
    var actual = cunoneBy( [], isPositive );
    t.deepEqual( actual, [], 'returns an empty array' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

tape( 'the function handles arrays with all elements passing the test', function test( t ) {
    var x = [ 1, 2, 3, 4, 5 ];
    var expected = [ false, false, false, false, false ];
    var actual = cunoneBy( x, isPositive );
    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

tape( 'the function handles arrays with all elements failing the test', function test( t ) {
    var x = [ -1, -2, -3, -4, -5 ];
    var expected = [ true, true, true, true, true ];
    var actual = cunoneBy( x, isPositive );
    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

tape( 'the function correctly handles NaN values', function test( t ) {
    var x = [ 0, NaN, 0, 1, 0 ];
    var expected = [ true, false, false, false, false ];
    var actual = cunoneBy( x, isPositive );
    t.deepEqual( actual, expected, 'returns expected value' );
    t.end();

    function isPositive( value ) {
        return value > 0;
    }
});

// Add more tests as needed